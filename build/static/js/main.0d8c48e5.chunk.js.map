{"version":3,"sources":["tex/model_texture.jpg","index.js"],"names":["module","exports","App","handleWindowResize","width","props","height","renderer","setSize","camera","aspect","updateProjectionMatrix","sceneSetup","scene","THREE","controls","OrbitControls","el","enableZoom","position","z","alpha","setClearColor","appendChild","domElement","addCustomSceneObjects","geometry","material","color","emissive","side","flatShading","cube","add","lights","set","GLTFLoader","setPath","process","load","gltf","traverse","child","isMesh","startAnimationLoop","rotation","x","y","render","requestID","window","requestAnimationFrame","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","src","mesh_map","alt","className","ref","Component","rootElement","document","getElementById","ReactDOM","screen"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,2C,0LCOrCC,E,2MAiBFC,mBAAqB,WACjB,IAAMC,EAAQ,EAAKC,MAAMD,MACnBE,EAAS,EAAKD,MAAMC,OAE1B,EAAKC,SAASC,QAASJ,EAAOE,GAC9B,EAAKG,OAAOC,OAASN,EAAQE,EAC7B,EAAKG,OAAOE,0B,EAGhBC,WAAa,WAET,IAAMR,EAAQ,EAAKC,MAAMD,MACnBE,EAAS,EAAKD,MAAMC,OAE1B,EAAKO,MAAQ,IAAIC,KACjB,EAAKL,OAAS,IAAIK,IACd,GACAV,EAAQE,EACR,GACA,KAGJ,EAAKS,SAAW,IAAIC,IAAe,EAAKP,OAAQ,EAAKQ,IAGrD,EAAKF,SAASG,YAAa,EAI3B,EAAKT,OAAOU,SAASC,EAAI,EAEzB,EAAKb,SAAW,IAAIO,KAAoB,CAACO,OAAQ,IACjD,EAAKd,SAASe,cAAe,EAAU,GAEvC,EAAKf,SAASC,QAASJ,EAAOE,GAC9B,EAAKW,GAAGM,YAAa,EAAKhB,SAASiB,a,EAGvCC,sBAAwB,WACpB,IAAMC,EAAW,IAAIZ,IAAkB,EAAG,EAAG,GACvCa,EAAW,IAAIb,IAAyB,CAC1Cc,MAAO,QACPC,SAAU,OACVC,KAAMhB,IACNiB,aAAa,IAEjB,EAAKC,KAAO,IAAIlB,IAAYY,EAAUC,GACtC,EAAKd,MAAMoB,IAAK,EAAKD,MAErB,IAAME,EAAS,GACfA,EAAQ,GAAM,IAAIpB,IAAkB,SAAU,EAAG,GACjDoB,EAAQ,GAAM,IAAIpB,IAAkB,SAAU,EAAG,GACjDoB,EAAQ,GAAM,IAAIpB,IAAkB,SAAU,EAAG,GAEjDoB,EAAQ,GAAIf,SAASgB,IAAK,EAAG,IAAK,GAClCD,EAAQ,GAAIf,SAASgB,IAAK,IAAK,IAAK,KACpCD,EAAQ,GAAIf,SAASgB,KAAO,KAAO,KAAO,KAE1C,EAAKtB,MAAMoB,IAAKC,EAAQ,IACxB,EAAKrB,MAAMoB,IAAKC,EAAQ,IACxB,EAAKrB,MAAMoB,IAAKC,EAAQ,KAET,IAAIE,KAAaC,QAASC,IAClCC,KAAM,mBAAmB,SAACC,GAC7BA,EAAK3B,MAAM4B,UAAU,SAAEC,GACdA,EAAMC,QACP,EAAK9B,MAAMoB,IAAKO,EAAK3B,c,EAKrC+B,mBAAqB,WAChB,EAAKZ,KAAKa,SAASC,GAAK,IACxB,EAAKd,KAAKa,SAASE,GAAK,IAEzB,EAAKxC,SAASyC,OAAQ,EAAKnC,MAAO,EAAKJ,QACvC,EAAKwC,UAAYC,OAAOC,sBAAsB,EAAKP,qB,mFA1FnDQ,KAAKxC,aACLwC,KAAK3B,wBACL2B,KAAKR,qBACLQ,KAAKjD,qBAEL+C,OAAOG,iBAAiB,SAAUD,KAAKjD,sB,6CAIvC+C,OAAOI,oBAAoB,SAAUF,KAAKjD,oBAC1C+C,OAAOK,qBAAqBH,KAAKH,WACjCG,KAAKrC,SAASyC,Y,+BAmFR,IAAD,OAEL,OACI,6BACI,yBAAKC,IAAKC,IAAUC,IAAI,OAAOC,UAAW,mBAC1C,yBAAKC,IAAK,SAAAA,GAAG,OAAK,EAAK5C,GAAK4C,GAAMD,UAAW,gB,GAtG3CE,aA4GZC,EAAcC,SAASC,eAAe,QAC5CC,IAASlB,OAAO,kBAAC9C,EAAD,CAAKE,MAAO8C,OAAOiB,OAAO/D,MAAOE,OAAQ4C,OAAOiB,OAAO7D,SAAWyD,K","file":"static/js/main.0d8c48e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/model_texture.0acb1dd7.jpg\";","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\nimport mesh_map from './tex/model_texture.jpg'; // Tell webpack this JS file uses this image\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.sceneSetup();\n        this.addCustomSceneObjects();\n        this.startAnimationLoop();\n        this.handleWindowResize();\n\n        window.addEventListener('resize', this.handleWindowResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n        this.controls.dispose();\n    }\n\n    handleWindowResize = () => {\n        const width = this.props.width;\n        const height = this.props.height;\n\n        this.renderer.setSize( width, height );\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n    };\n\n    sceneSetup = () => {\n        // get container dimensions and use them for scene sizing\n        const width = this.props.width;\n        const height = this.props.height;\n\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            75, // fov = field of view\n            width / height, // aspect ratio\n            0.1, // near plane\n            1000 // far plane\n        );\n\n        this.controls = new OrbitControls( this.camera, this.el );\n\n        // after that this.controls might be used for enabling/disabling zoom:\n        this.controls.enableZoom = true;\n\n\n        // set some distance from a cube that is located at z = 0\n        this.camera.position.z = 1;\n\n        this.renderer = new THREE.WebGLRenderer({alpha : true});\n        this.renderer.setClearColor( 0x000000, 0 ); // the default\n\n        this.renderer.setSize( width, height );\n        this.el.appendChild( this.renderer.domElement ); // mount using React ref\n    };\n\n    addCustomSceneObjects = () => {\n        const geometry = new THREE.BoxGeometry(2, 2, 2);\n        const material = new THREE.MeshPhongMaterial( {\n            color: 0x156289,\n            emissive: 0x072534,\n            side: THREE.DoubleSide,\n            flatShading: true\n        } );\n        this.cube = new THREE.Mesh( geometry, material );\n        this.scene.add( this.cube );\n\n        const lights = [];\n        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n\n        lights[ 0 ].position.set( 0, 200, 0 );\n        lights[ 1 ].position.set( 100, 200, 100 );\n        lights[ 2 ].position.set( - 100, - 200, - 100 );\n\n        this.scene.add( lights[ 0 ] );\n        this.scene.add( lights[ 1 ] );\n        this.scene.add( lights[ 2 ] );\n\n        const loader = new GLTFLoader().setPath( process.env.PUBLIC_URL );\n        loader.load( 'shrinkwrap.gltf', (gltf)=> {\n            gltf.scene.traverse( ( child )=> {\n                if ( child.isMesh ) {\n                    this.scene.add( gltf.scene );\n                }\n            } );\n        } );\n    };\n    startAnimationLoop = () => {\n         this.cube.rotation.x += 0.01;\n         this.cube.rotation.y += 0.01;\n\n        this.renderer.render( this.scene, this.camera );\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n\n\n    render() {\n\n        return(\n            <div>\n                <img src={mesh_map} alt=\"Logo\" className={'background_img'}/>\n                <div ref={ref => (this.el = ref)} className={'canvas'}/>\n            </div>\n            )\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App width={window.screen.width} height={window.screen.height}/>, rootElement);"],"sourceRoot":""}